-- Criar nova tabela send_ranking
CREATE TABLE public.send_ranking (
  id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  id_event bigint NOT NULL,
  hour time NOT NULL,
  weekday integer NOT NULL,
  message text,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  updated_at timestamp with time zone NOT NULL DEFAULT now()
);

-- Habilitar RLS
ALTER TABLE public.send_ranking ENABLE ROW LEVEL SECURITY;

-- Criar polÃ­ticas RLS
CREATE POLICY "Public can view send_ranking"
ON public.send_ranking
FOR SELECT
USING (true);

CREATE POLICY "Authenticated users can insert send_ranking"
ON public.send_ranking
FOR INSERT
WITH CHECK (true);

CREATE POLICY "Authenticated users can update send_ranking"
ON public.send_ranking
FOR UPDATE
USING (true);

CREATE POLICY "Authenticated users can delete send_ranking"
ON public.send_ranking
FOR DELETE
USING (true);

-- Migrar dados existentes (se houver)
INSERT INTO public.send_ranking (id_event, hour, weekday, message)
SELECT 
  id,
  (item->>'hour')::time,
  (item->>'weekday')::integer,
  '' -- mensagem vazia inicialmente
FROM public.events,
LATERAL jsonb_array_elements(send_ranking) AS item
WHERE send_ranking IS NOT NULL AND jsonb_array_length(send_ranking) > 0;

-- Remover a coluna send_ranking da tabela events
ALTER TABLE public.events DROP COLUMN send_ranking;

-- Trigger para updated_at
CREATE TRIGGER update_send_ranking_updated_at
BEFORE UPDATE ON public.send_ranking
FOR EACH ROW
EXECUTE FUNCTION public.update_updated_at_column();